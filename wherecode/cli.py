import argparse
from analyze import *
from crawl.code_crawler import crawl_action


def main():
    parser = argparse.ArgumentParser(description='Command-line interface for running tasks.')

    subparsers = parser.add_subparsers(dest='command', help='sub-command help')

    # command: analysis
    analyze_parser = subparsers.add_parser('analyze', help='Analyze github code generated by LLms.')
    analyze_parser.add_argument('--llm', type=str, required=False, help='llm name', choices=["chatgpt"], default="chatgpt")
    analyze_parser.add_argument('--lang', type=str, required=True, help='language', choices=["python", "java", "javascript", "typescript", "c", "cpp"])
    analyze_parser.add_argument('--keyword', type=str, required=True, help='keyword', choices=["generated", "created", "implemented", "written", "coded"])
    analyze_parser.add_argument('--start', required=False, help='The location where the analysis starts')
    analyze_parser.add_argument('--end', required=False, help='The location where the analysis ends')
    analyze_parser.add_argument('--extract', required=False, nargs="?", const=True, default=False, help='Whether to save the extracted code. Default is False.')
    analyze_parser.add_argument('--diff', required=False, nargs="?", const=True, default=False, help='Whether to perform a diff analysis on the code changes. Default is False.')
    analyze_parser.add_argument('--file', required=False, nargs="?", const=True, default=False, help='Whether to download the files that contain the gpt-generated code in each commit. Default is False.')
    analyze_parser.add_argument('--project', required=False, nargs="?", const=True, default=False, help='Whether to download the entire project of the commit that contains the first gpt-generated code. Default is False.')
    analyze_parser.add_argument('--commit', required=False, nargs="?", const=True, default=False, help='Whether to download each commit message. Default is False.')
    analyze_parser.add_argument('--sonarqube', required=False, nargs="?", const=True, default=False, help='Whether to analyze the gpt-generated code or project using SonarQube. Default is False.')

    statdist_parser = subparsers.add_parser('stat-dist', help='Statistics on the distribution of GPT-generated code characteristics in a particular language.')
    statdist_parser.add_argument('--llm', type=str, required=False, help='llm name', choices=["chatgpt"],
                                default="chatgpt")
    statdist_parser.add_argument('--lang', type=str, required=True, help='language',
                                choices=["python", "java", "javascript", "typescript", "c", "cpp"])
    statdist_parser.add_argument('--change', required=False, nargs="?", const=True, default=False, help='Analyze only the GPT-generated code that has changes.')
    statdist_parser.add_argument('--percent', required=False, help='Analyze the top percentage of high-start projects, for example, 0.1 represents the top 10%. Deafult is 1.0')

    statall_parser = subparsers.add_parser('stat-all',
                                             help='Statistics summary of GPT-generated code characteristics in different languages.')
    statall_parser.add_argument('--percent', required=False,
                                  help='Analyze the top percentage of high-start projects, for example, 0.1 represents the top 10%. Deafult is 1.0')

    draw_parser = subparsers.add_parser('draw',
                                           help='Draw violin plots for the 3 research questions (RQs).')
    draw_parser.add_argument('--RQ1', required=False, nargs="?", const=True, default=False,
                                help='Whether to plot the distribution of the stars, files, contributors, commits, bug-fix commits, and issues in the projects containing the GPT-generated code. Default is False.')
    draw_parser.add_argument('--RQ2', required=False, nargs="?", const=True, default=False,
                                help='Whether to plot the violin plot distribution of the LOC, cyclomatic complexity, and cognitive complexity of the GPT-generated code across the five programming languages. Default is False.')
    draw_parser.add_argument('--RQ3', required=False, nargs="?", const=True, default=False,
                             help='Whether to plot the violin plot distribution of the ratio of lines, average method cyclomatic complexity, average method cognitive complexity, average modification, and average bug-fix modification for GPT-generated code in the projects. Default is False.')

    mv_parser = subparsers.add_parser('mv',
                                        help='Read the results xlsx answered by gpt-4.0, move to the results statistics table csv of a certain language.')
    mv_parser.add_argument('--change', required=False, nargs="?", const=True, default=False, help='Analyze only the GPT-generated code that has changes.')
    mv_parser.add_argument('--llm', type=str, required=False, help='llm name', choices=["chatgpt"],
                                default="chatgpt")
    mv_parser.add_argument('--lang', type=str, required=True, help='language',
                                choices=["python", "java", "javascript", "typescript", "c", "cpp"])
    crawl_parser = subparsers.add_parser('crawl',help='Based on search keywords, obtain detailed information about files, projects, and repositories containing the keywords through precise searches on GitHub.')
    crawl_parser.add_argument("--token",type=str,required=True,help="github api token")
    args = parser.parse_args()

    if args.command == 'analyze':
        print("====================Start task: Analyze=========================\n")
        print(f"Analyzing code generated by {args.llm} in {args.lang} using the keyword '{args.keyword}'.")
        print(f"==> Start: {args.start}, ==> End: {args.end}, \n==> Extract the GPT-generated code: {args.extract}, \n==> Diff analysis of commits: {args.diff}, \n==> Download file containing GPT-generated code in each commit: {args.file}, \n==> Download project: {args.project}, \n==> Download commit messages: {args.commit}, \n==> Process sonarqube analysis of file and project: {args.sonarqube}")
        analyze_gpt_generated_code_and_more(args.llm, args.lang, args.keyword, start=args.start, end=args.end, is_save_code=args.extract, is_diff=args.diff, is_download_file=args.file, is_download_project=args.project, is_download_commit=args.commit, is_sonarqube=args.sonarqube)
        print("\n====================End task: Analyze=========================")
    elif args.command == 'stat-dist':
        print("====================Start task: Statistic distribution=========================\n")
        print(f"Analyzing the distribution of GPT-generated code characteristics in {args.lang}.")
        calculate_various_measures(args.llm, args.lang, only_change=args.change, top_percent=args.percent)
        print("\n====================End task: Statistic distributio=========================")
    elif args.command == 'stat-all':
        print("====================Start task: Statistic all=========================\n")
        print("Analyzing the summary of GPT-generated code characteristics in different languages")
        statistics_metrics_for_all(top_percent=args.percent)
        print("\n====================End task: Statistic all=========================")
    elif args.command == 'draw':
       print("====================Start task: Draw=========================\n")
       if args.RQ1:
           print("Plot the distribution of the stars, files, contributors, commits, bug-fix commits, and issues in the projects containing the GPT-generated code.")
           draw_violinplot_from_different_metrics(
               ["star", "project_files", "contributor", "project_commits", "number_of_bug_or_vulnerability_all_commit",
                "issues"], ['Stars Distribution', 'Project Files Distribution'],
               ['The number of stars', 'The number of files', "The number of\ncontributors", "The number of commits",
                "The number of\nbug-fix commits", "The number of issues"], res_name="RQ1")
       if args.RQ2:
           print("Plot the violin plot distribution of the LOC, cyclomatic complexity, and cognitive complexity of the GPT-generated code across the five programming languages.")
           draw_violinplot_from_different_metrics(["code_locs", "code_complexity_all", "code_cognitive_complexity_all"],
                                                  ['', '', ""],
                                                  ['The lines of\ngenerated code', 'The CC of\ngenerated code',
                                                   'The CogC of\ngenerated code'], res_name="RQ2")
       if args.RQ3:
           print("Plot the violin plot distribution of the ratio of lines, average method cyclomatic complexity, average method cognitive complexity, average modification, and average bug-fix modification for GPT-generated code in the projects")
           draw_violinplot_manual_vs_gpt()
    elif args.command == 'mv':
        print("====================Start task: Move=========================\n")
        if not args.change:
            if args.lang == "python":
                read_xlsx_to_csv('results-code-nochange-type/python-code-type.xlsx', 'chatgpt', 'python')
            elif args.lang == "java":
                read_xlsx_to_csv('results-code-nochange-type/java-code-type.xlsx', 'chatgpt', 'java')
            elif args.lang == "javascript":
                read_xlsx_to_csv('results-code-nochange-type/javascript-code-type.xlsx', 'chatgpt', 'javascript')
            elif args.lang == "typescript":
                  read_xlsx_to_csv('results-code-nochange-type/typescript-code-type.xlsx', 'chatgpt', 'typescript')
            elif args.lang == "cpp":
                read_xlsx_to_csv('results-code-nochange-type/cpp-code-type.xlsx', 'chatgpt', 'cpp')
        else:
            if args.lang == "python":
                read_xlsx_to_csv('results-code-change-type/python-code-change-type.xlsx', 'chatgpt', 'python', is_change=True)
            elif args.lang == "java":
                  read_xlsx_to_csv('results-code-change-type/java-code-change-type.xlsx', 'chatgpt', 'java', is_change=True)
            elif args.lang == "javascript":
                read_xlsx_to_csv('results-code-change-type/javascript-code-change-type.xlsx', 'chatgpt', 'javascript', is_change=True)
            elif args.lang == "typescript":
                read_xlsx_to_csv('results-code-change-type/typescript-code-change-type.xlsx', 'chatgpt', 'typescript', is_change=True)
            elif args.lang == "cpp":
                read_xlsx_to_csv('results-code-change-type/cpp-code-change-type.xlsx', 'chatgpt', 'cpp', is_change=True)
        print("\n====================End task: Move=========================")
    elif args.command == 'crawl':
        print("====================Start task: Crawl=========================\n")
        crawl_action(args.token)
        print("\n====================End task: Crawl=========================")

    else:
        parser.print_help()


if __name__ == '__main__':
    main()
